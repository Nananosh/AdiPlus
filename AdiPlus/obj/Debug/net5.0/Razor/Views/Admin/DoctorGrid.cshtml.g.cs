#pragma checksum "F:\Education\Poliklinika2\AdiPlus\AdiPlus\Views\Admin\DoctorGrid.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "21642495689d66959702f0fd0152c412ec1dd10b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Admin_DoctorGrid), @"mvc.1.0.view", @"/Views/Admin/DoctorGrid.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\Education\Poliklinika2\AdiPlus\AdiPlus\Views\_ViewImports.cshtml"
using AdiPlus;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\Education\Poliklinika2\AdiPlus\AdiPlus\Views\_ViewImports.cshtml"
using AdiPlus.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"21642495689d66959702f0fd0152c412ec1dd10b", @"/Views/Admin/DoctorGrid.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"227dd85341b0ba1bc4af11ee4d557b38dabb3b18", @"/Views/_ViewImports.cshtml")]
    public class Views_Admin_DoctorGrid : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<div id=\"grid\"> </div>\r\n<script>\r\n    $(\"#grid\").kendoGrid({\r\n                dataSource: {\r\n                    transport: {\r\n                        read: \"");
#nullable restore
#line 6 "F:\Education\Poliklinika2\AdiPlus\AdiPlus\Views\Admin\DoctorGrid.cshtml"
                          Write(Url.Action("GetAllDoctors", "Appointment"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\",\r\n                        update: {\r\n                            url: \"");
#nullable restore
#line 8 "F:\Education\Poliklinika2\AdiPlus\AdiPlus\Views\Admin\DoctorGrid.cshtml"
                             Write(Url.Action("UpdateDoctor", "Admin"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\",\r\n                            dataType: \"json\",\r\n                            type: \"POST\"\r\n                        },\r\n                        destroy: {\r\n                            url: \"");
#nullable restore
#line 13 "F:\Education\Poliklinika2\AdiPlus\AdiPlus\Views\Admin\DoctorGrid.cshtml"
                             Write(Url.Action("RemoveDoctor", "Admin"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            dataType: ""json"",
                            type: ""DELETE""
                        }
                    },
                    schema: {
                        model: {
                            id: ""Id"",
                            fields: {
                                Id: { from: ""id"", type: ""number"", validation: { required: true }, editable: false},
                                Specialization: { from: ""specialization"", nullable: true, validation: { required: true } },
                                SpecializationId: { from: ""specializationId"", nullable: true, validation: { required: true } },
                                Name: { from: ""name"", validation: { required: true } },
                                Surname: { from: ""surname"", validation: { required: true } },
                                LastName: { from: ""lastName"", validation: { required: true } },
                                Cabinet: { from: ""cabinet"", nullable: true, validat");
            WriteLiteral(@"ion: { required: true }},
                                CabinetId: { from: ""cabinetId"", nullable: true, validation: { required: true }},
                            }
                        }
                    },
                    pageSize: 20,
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                height: 550,
                editable: ""popup"",
                pageable: true,
                columns: [
                    {
                        field:""Id"",
                        filterable: false
                    },
                    {
                        field: ""Specialization.specializationName"",
                        title: ""Специальность"",
                        editor: specializationEditor,
                        template: function (dataItem) {
                            if (dataItem.Specialization == null)
                                return '';
   ");
            WriteLiteral(@"                         else
                                return dataItem.Specialization.specializationName;
                        }
                    },
                    {
                        field: ""Name"",
                        title: ""Имя""
                    },
                    {
                        field: ""Surname"",
                        title: ""Фамилия""
                    },
                    {
                        field: ""LastName"",
                        title: ""Отчество""
                    },
                    {
                        field: ""Cabinet.cabinetNumber"",
                        title: ""Кабинет"",
                        editor: cabinetEditor,
                        template: function (dataItem) {
                            if (dataItem.Cabinet == null)
                                return '';
                            else
                                return dataItem.Cabinet.cabinetNumber;
                        }
   ");
            WriteLiteral(@"                 },
                    {
                        command: ""edit"",
                    },
                    {
                        command: ""destroy""
                    }
                ]
    });

    function specializationEditor(container, options) {
                $('<input required name=""SpecializationId"">')
                    .appendTo(container)
                    .kendoDropDownList({
                        dataTextField: ""specializationName"",
                        dataValueField: ""id"",
                        height: 500,
                        dataSource: {
                            transport: {
                                read: {
                                    url: """);
#nullable restore
#line 99 "F:\Education\Poliklinika2\AdiPlus\AdiPlus\Views\Admin\DoctorGrid.cshtml"
                                     Write(Url.Action("GetAllSpecializations", "Admin"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                                    dataType: ""json"",
                                    cache: false
                                }
                            }
                        }
                    });
            }
            
    function cabinetEditor(container, options) {
                $('<input required name=""CabinetId"">')
                    .appendTo(container)
                    .kendoDropDownList({
                        dataTextField: ""cabinetNumber"",
                        dataValueField: ""id"",
                        height: 500,
                        dataSource: {
                            transport: {
                                read: {
                                    url: """);
#nullable restore
#line 118 "F:\Education\Poliklinika2\AdiPlus\AdiPlus\Views\Admin\DoctorGrid.cshtml"
                                     Write(Url.Action("GetAllCabinet", "Admin"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\",\r\n                                    dataType: \"json\",\r\n                                    cache: false\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
